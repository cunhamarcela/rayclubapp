// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/integration/challenge_workout_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/features/auth/repositories/auth_repository.dart'
    as _i8;
import 'package:ray_club_app/features/challenges/models/challenge.dart' as _i2;
import 'package:ray_club_app/features/challenges/models/challenge_group.dart'
    as _i3;
import 'package:ray_club_app/features/challenges/models/challenge_progress.dart'
    as _i7;
import 'package:ray_club_app/features/challenges/repositories/challenge_repository.dart'
    as _i5;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChallenge_0 extends _i1.SmartFake implements _i2.Challenge {
  _FakeChallenge_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChallengeGroup_1 extends _i1.SmartFake
    implements _i3.ChallengeGroup {
  _FakeChallengeGroup_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_2 extends _i1.SmartFake implements _i4.User {
  _FakeUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChallengeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeRepository extends _i1.Mock
    implements _i5.ChallengeRepository {
  MockChallengeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Challenge>> getChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge> getChallengeById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getChallengeById,
          [id],
        ),
        returnValue: _i6.Future<_i2.Challenge>.value(_FakeChallenge_0(
          this,
          Invocation.method(
            #getChallengeById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Challenge>);

  @override
  _i6.Future<List<_i2.Challenge>> getUserChallenges(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserChallenges,
          [userId],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<List<_i2.Challenge>> getActiveChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getActiveChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<List<_i2.Challenge>> getUserActiveChallenges(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserActiveChallenges,
          [userId],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge?> getOfficialChallenge() => (super.noSuchMethod(
        Invocation.method(
          #getOfficialChallenge,
          [],
        ),
        returnValue: _i6.Future<_i2.Challenge?>.value(),
      ) as _i6.Future<_i2.Challenge?>);

  @override
  _i6.Future<List<_i2.Challenge>> getOfficialChallenges() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfficialChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge?> getMainChallenge() => (super.noSuchMethod(
        Invocation.method(
          #getMainChallenge,
          [],
        ),
        returnValue: _i6.Future<_i2.Challenge?>.value(),
      ) as _i6.Future<_i2.Challenge?>);

  @override
  _i6.Future<_i2.Challenge> createChallenge(_i2.Challenge? challenge) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChallenge,
          [challenge],
        ),
        returnValue: _i6.Future<_i2.Challenge>.value(_FakeChallenge_0(
          this,
          Invocation.method(
            #createChallenge,
            [challenge],
          ),
        )),
      ) as _i6.Future<_i2.Challenge>);

  @override
  _i6.Future<void> updateChallenge(_i2.Challenge? challenge) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChallenge,
          [challenge],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteChallenge(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteChallenge,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> joinChallenge(
    String? challengeId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChallenge,
          [
            challengeId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> leaveChallenge(
    String? challengeId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveChallenge,
          [
            challengeId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateUserProgress({
    required String? challengeId,
    required String? userId,
    required String? userName,
    String? userPhotoUrl,
    required int? points,
    required double? completionPercentage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProgress,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
            #userName: userName,
            #userPhotoUrl: userPhotoUrl,
            #points: points,
            #completionPercentage: completionPercentage,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.ChallengeProgress?> getUserProgress(
    String? challengeId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProgress,
          [
            challengeId,
            userId,
          ],
        ),
        returnValue: _i6.Future<_i7.ChallengeProgress?>.value(),
      ) as _i6.Future<_i7.ChallengeProgress?>);

  @override
  _i6.Future<List<_i7.ChallengeProgress>> getChallengeProgress(
          String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeProgress,
          [challengeId],
        ),
        returnValue: _i6.Future<List<_i7.ChallengeProgress>>.value(
            <_i7.ChallengeProgress>[]),
      ) as _i6.Future<List<_i7.ChallengeProgress>>);

  @override
  _i6.Stream<List<_i7.ChallengeProgress>> watchChallengeParticipants(
          String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChallengeParticipants,
          [challengeId],
        ),
        returnValue: _i6.Stream<List<_i7.ChallengeProgress>>.empty(),
      ) as _i6.Stream<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<List<_i3.ChallengeGroupInvite>> getPendingInvites(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingInvites,
          [userId],
        ),
        returnValue: _i6.Future<List<_i3.ChallengeGroupInvite>>.value(
            <_i3.ChallengeGroupInvite>[]),
      ) as _i6.Future<List<_i3.ChallengeGroupInvite>>);

  @override
  _i6.Future<_i3.ChallengeGroup> createGroup({
    required String? challengeId,
    required String? creatorId,
    required String? name,
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [],
          {
            #challengeId: challengeId,
            #creatorId: creatorId,
            #name: name,
            #description: description,
          },
        ),
        returnValue: _i6.Future<_i3.ChallengeGroup>.value(_FakeChallengeGroup_1(
          this,
          Invocation.method(
            #createGroup,
            [],
            {
              #challengeId: challengeId,
              #creatorId: creatorId,
              #name: name,
              #description: description,
            },
          ),
        )),
      ) as _i6.Future<_i3.ChallengeGroup>);

  @override
  _i6.Future<_i3.ChallengeGroup> getGroupById(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [groupId],
        ),
        returnValue: _i6.Future<_i3.ChallengeGroup>.value(_FakeChallengeGroup_1(
          this,
          Invocation.method(
            #getGroupById,
            [groupId],
          ),
        )),
      ) as _i6.Future<_i3.ChallengeGroup>);

  @override
  _i6.Future<List<_i3.ChallengeGroup>> getUserCreatedGroups(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserCreatedGroups,
          [userId],
        ),
        returnValue:
            _i6.Future<List<_i3.ChallengeGroup>>.value(<_i3.ChallengeGroup>[]),
      ) as _i6.Future<List<_i3.ChallengeGroup>>);

  @override
  _i6.Future<List<_i3.ChallengeGroup>> getUserMemberGroups(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMemberGroups,
          [userId],
        ),
        returnValue:
            _i6.Future<List<_i3.ChallengeGroup>>.value(<_i3.ChallengeGroup>[]),
      ) as _i6.Future<List<_i3.ChallengeGroup>>);

  @override
  _i6.Future<void> updateGroup(_i3.ChallengeGroup? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [groupId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> inviteUserToGroup(
    String? groupId,
    String? inviterId,
    String? inviteeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #inviteUserToGroup,
          [
            groupId,
            inviterId,
            inviteeId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> respondToGroupInvite(
    String? inviteId,
    bool? accept,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToGroupInvite,
          [
            inviteId,
            accept,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeUserFromGroup(
    String? groupId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserFromGroup,
          [
            groupId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.ChallengeProgress>> getGroupRanking(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupRanking,
          [groupId],
        ),
        returnValue: _i6.Future<List<_i7.ChallengeProgress>>.value(
            <_i7.ChallengeProgress>[]),
      ) as _i6.Future<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<bool> hasCheckedInOnDate(
    String? userId,
    String? challengeId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasCheckedInOnDate,
          [
            userId,
            challengeId,
            date,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<int> getConsecutiveDaysCount(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsecutiveDaysCount,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> recordChallengeCheckIn(
    String? userId,
    String? challengeId,
    DateTime? date,
    int? points,
    String? userName,
    String? userPhotoUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordChallengeCheckIn,
          [
            userId,
            challengeId,
            date,
            points,
            userName,
            userPhotoUrl,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addBonusPoints(
    String? userId,
    String? challengeId,
    int? points,
    String? reason,
    String? userName,
    String? userPhotoUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBonusPoints,
          [
            userId,
            challengeId,
            points,
            reason,
            userName,
            userPhotoUrl,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i8.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);

  @override
  _i6.Future<bool> isEmailRegistered(String? email) => (super.noSuchMethod(
        Invocation.method(
          #isEmailRegistered,
          [email],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.User> signUp(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i6.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #signUp,
            [
              email,
              password,
              name,
            ],
          ),
        )),
      ) as _i6.Future<_i4.User>);

  @override
  _i6.Future<_i4.User> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i4.User>);

  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateProfile({
    String? name,
    String? photoUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #name: name,
            #photoUrl: photoUrl,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i4.Session?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i6.Future<_i4.Session?>.value(),
      ) as _i6.Future<_i4.Session?>);

  @override
  _i6.Future<_i4.User?> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i6.Future<_i4.User?>.value(),
      ) as _i6.Future<_i4.User?>);

  @override
  _i6.Future<void> refreshSession() => (super.noSuchMethod(
        Invocation.method(
          #refreshSession,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
